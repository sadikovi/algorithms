EXTREME PROGRAMMING VS. WATERFALL APPROACH
Contents
Introduction ............................................................................................................................................ 3 Extreme programming as an agile development approach.................................................................... 3 Rules and concept...............................................................................................................................3 Planning........................................................................................................................................... 4 Managing ........................................................................................................................................ 4 Designing......................................................................................................................................... 4 Coding ............................................................................................................................................. 4 Testing ............................................................................................................................................. 4 Development process ......................................................................................................................... 4 Waterfall approach ................................................................................................................................. 5 Differences in planning, estimation, delivery and change management ............................................... 5 Human aspects of the approaches ......................................................................................................... 6 Summary ................................................................................................................................................. 7 References .............................................................................................................................................. 8
2
Introduction
All the companies in the world require different approaches in managing development process. They differ from traditional project management to agile methodology, which proposes alternatives in team collaboration, development lifecycle and responds to unpredictability and changes. The traditional management is plan driven, one of the examples is Waterfall approach. Whereas, agile methodology proposes iterative work process with, strictly speaking, adapting plan to the results.
“... Welcome changing requirements, even late in development. Agile processes harness change for the customer's competitive advantage.
Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale.”
Jim Highsmith, Principles behind the Agile Manifesto (http://agilemanifesto.org/principles.html)
Thus, we are going to compare the differences between Waterfall and Extreme Programming as one of the approaches of agile methodology.
Extreme programming as an agile development approach
Extreme programming (or XP) concentrates on the development rather than management of software. The main purpose of this approach is to delivery functionality in relatively short iteration of time which involves committing changes every short period of time and availability of customer to help development team and make corrections if necessary. For instance, if customers may not have a firm idea of the product or functionality changes (or at least is expected to be changed) every few months, probably, XP will be the best approach. I assume that XP is also really helpful in projects with high risks (for example, project can be something new in software industry, which refer to start-up projects).
“Extreme Programming is successful because it stresses customer satisfaction. Instead of delivering everything you could possibly want on some date far in the future this process delivers the software you need as you need it. Extreme Programming empowers your developers to confidently respond to changing customer requirements, even late in the life cycle.”
Don Wells, Extreme Programming: A Gentle Introduction (http://www.extremeprogramming.org/)
It is also designed for companies to be able to adopt all or part of methodology. The XP development process will be described later.
Rules and concept
As all of the agile approaches XP has some concepts and rules which is essential to follow. They are simple to read, but hard to implement in real life. As you will see, it positions team collaboration (including customer who becomes a part of the team), and frequent small iterations at the first place. XP concepts can be represented as listed below (Don Wells, 2013).
3
Planning
XP uses user stories as some sort of cases or usage scenarios instead of large requirement documents. User stories are written by customer with developers help in three-four sentences using business terminology. When user story is created acceptance tests are also should be developed. Iteration planning is compulsory, all is developed in iterations, each iteration lasts from 1 week to 3 weeks (new version of software can even be released every day). This makes small feature releases very important.
Managing
XP requires to manage stand-up and iteration planning meetings (and communication in common), and project velocity, all the people should know enough about every aspect of the system they build (collective code ownership) - in case if someone goes to holidays work progress will not end up in crawl. The most important thing is that customer is always available, moreover he or she becomes a part of the development process.
Designing
It is very important to keep simplicity in design. Although it is a very subjective thing (one person’s simple is another person’s complex), so it is essential to decide in a team what is a measure of simplicity. Refactoring code helps to remove redundancy, unused functionality and makes code easier to read and integrate. XP also demands that no extra functionality should be added until the task to add that functionality is ready (other words, it is needed now).
Coding
XP proposes code must be written to meet code standards. Pair programming is essential, though people should not be confused by differences between pair programming and mentoring. Delivering code is very often procedure, so XP proposes the often integrating (code should be committed in repository every few hours).
Testing
Unit tests are developed first, moreover all the code must have unit tests and pass it before release. And when a bug is found unit test should be developed to prevent it from coming back, what seems very logical. Acceptance tests are used to verify that functionality works correctly.
Development process
Generally, people start extreme programming with a new project, it is also a possibility to start XP though when project is in trouble or is slowed down by something.
XP project starts with collecting user stories and solutions for situations that seem to be tricky. User writes “user stories” to describe the need the software should fulfil. User stories help the team to estimate the time and resources necessary to build the release and to define user acceptance tests.
The next step is a release planning phase. To create a release plan, the team divides the development tasks into iterations. The release plan defines each iteration plan, which provides tasks for an iteration. At the end of an iteration, acceptance tests are performed against the user stories. By the way, if bugs are found during the tests, fixing the bugs becomes the part of the next iteration.
4
Software can be released after all originally planned user stories being implemented. Although if user decides that enough user stories have been delivered team can terminate the process and software can be also released (Serena Software, Inc., 2007).
Waterfall approach
Here we will briefly describe what the waterfall approach is. Basically, the waterfall approach is a sequential development process which has distinguished development phases (according to Waterfall Model, described in Wikipedia):
 Conception  Initiation
 Analysis
 Design
 Construction
 Testing
 Production/Implementation  Maintenance
Sometimes Conception, Initiation and Analysis are grouped in Requirements Analysis phase (Jennifer Dorette J., 2011).
It is clearly planned approach, when next phase can be only started, if previous phase is 100% completed, reviewed and verified. It is also well-documented and disciplined approach, though program requirements should be set at the beginning of the development process, and if the requirements or design have been changed, all the work completed after that point needs to be redone (Jennifer Dorette J., 2011).
Differences in planning, estimation, delivery and change management
Waterfall approach is dependent on the order of development phases. Requirements Analysis is the most important step since all the work will be based on the results of this phase. It should be well planned and includes clear definition of goals, expectations, problems that might occur during the project and possible solutions for these problems. Planning might take a long time up to several months for big systems. For example, to build the Business Intelligence Analytical system with Data warehouse and supporting applications, such as external sales systems, in Russian Telecommunication Company it took half of the year to gather all the information that was needed.
Though Extreme Programming does not operate with terms “Long-term Planning” and “Requirements” which are essential characteristics of Waterfall approach. It explores the software needs by writing user stories which are more features users expect than strong requirements. Planning in XP is divided by two parts, first is release plan that is consequently divided into iteration plans. When the user stories are written and prioritized, the team defines what goes in the first release and estimates the effort for each user story. Usually planning lasts less than a week.
As we can see the basic atomic unit of the XP is iteration instead of Waterfall, where a phase is a development unit. It would be fair to say that for XP approach each iteration can be considered as a sort of mini-waterfall process which includes planning, design, coding, testing and release.
5
Delivery of the product for waterfall model is a Production/Implementation stage. This step involves preparing product for installation and customer’s use after testing and verification. All the documentation must be already prepared (description of the product, developer’s guide and user documentation). This stage means that all the work on the project is done.
In XP product (or some functionality which has been covered in each iteration planning) is delivered by the end of iteration after passing unit and acceptance tests. This makes development process clearer and more transparent, thus users can see progress and test the product meanwhile. All this can possibly result in changes.
Change management in XP is based on iterations mechanism, which means that all the changes from customer or bugs found can be part of the next iteration and fixed in short period of time. It makes development process much more flexible comparing it to waterfall approach.
Waterfall approach manages changes during implementation period and in small amounts, it does not allow to change requirements (what happens in XP). If design of product has been changed when most of the coding has been done already, it is a disaster since most of the work becoming useless.
One of the XP concepts (simplicity of design) prevents that sort of problems and even if it happens the amount of work will be significantly decreased by strong code standards and, as I suppose, independent blocks of code and constant refactoring.
It does not happen in waterfall, because developers know that this product is unlikely to be changed and can allow to do bad programming (for example, I found a lot of OBIEE JavaScript minor mistakes, which work perfectly within system and do not allow to make any changes, especially Oracle BIEE Writeback feature).
Another benefit of XP change management that teammates know of all aspects of the system they develop, so, for instance, anyone can make changes in the core, if it is necessary and developer responsible for this part of code is on holiday (Don Wells, 2013). But for Waterfall method each team/programmer usually is responsible for only one part of developing system/product, and future changes will take a lot of time to implement.
Human aspects of the approaches
Waterfall approach distinguishes team members, thus programmers work only on implementation phase, analysts gather requirements etc. It means that different people develop product on different stages. Analysts and system architect are usually involved in gathering requirements, analysis and design. Project managers and programmers are involved in construction phase. QA team implements unit tests in testing phase. Meetings are not required, people can work separately and remotely (Alex Grabelkovsky, Guy Davis, Stephen Ford).
XP proposes work in small groups (up to 12 people), though manifesto says that, larger projects of 30 people reported success. The communication within group is essential including every day meetings (all the team members are attended) and pair programming. Chat between team members and group discussions are encouraged and make work together easier. Managers, customers and developers contribute equally and, more important, customer is involved in the development process (or in some cases even assigned to the team) and always available (Don Wells, 2013).
6
Summary
As a summary one can say that classic waterfall method stands for predictability and planning first, while agile methodology (and XP in particular) means adaptability, testing product at the end of every iteration and adapting plans to the results, which definitely benefit small teams with constantly changing requirements, rather more than larger projects.
7
References
Alex Grabelkovsky, Guy Davis, Stephen Ford. (n.d.). The Human Side of Agile Software Development. Retrieved from http://www.slideshare.net/guy_davis/the-human-side-of-software-development
Don Wells (2013, October 8). Extreme Programming: A Gentle Introduction. Retrieved from http://www.extremeprogramming.org/
Jennifer Dorette J. (November 2011). Comparing Agile XP and Waterfall Software Development Processes in two Start-up Companies.
Retrieved from http://publications.lib.chalmers.se/records/fulltext/149235.pdf
Jim Highsmith (2011). Manifesto for Agile Software Development. Retrieved from http://agilemanifesto.org/
Serena Software, Inc. (2007, June). An Introduction to Agile Software Development.
Retrieved from http://www.serena.com/docs/repository/solutions/intro-to-agile-devel.pdf
Waterfall Model. (2014, February 12).
Retrieved April 4, 2014, from http://en.wikipedia.org/wiki/Waterfall_model
8
